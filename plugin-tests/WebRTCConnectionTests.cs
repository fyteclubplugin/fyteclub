using System;
using System.Threading.Tasks;
using Xunit;
using FyteClub;

namespace FyteClubPlugin.Tests
{
    public class WebRTCConnectionTests
    {
        [Fact]
        public async Task WebRTCConnection_Initialize_ReturnsTrue()
        {
            // Arrange
            var connection = new MockWebRTCConnection();
            
            // Act
            var result = await connection.InitializeAsync();
            
            // Assert
            Assert.True(result);
            
            // Cleanup
            connection.Dispose();
        }

        [Fact]
        public async Task WebRTCConnection_CreateOffer_ReturnsNonEmptyString()
        {
            // Arrange
            var connection = new MockWebRTCConnection();
            await connection.InitializeAsync();
            
            // Act
            var offer = await connection.CreateOfferAsync();
            
            // Assert
            Assert.NotEmpty(offer);
            // Real SDP will be generated by WebRTC library
            
            // Cleanup
            connection.Dispose();
        }

        [Fact]
        public async Task WebRTCConnection_CreateAnswer_ReturnsNonEmptyString()
        {
            // Arrange
            var connection = new MockWebRTCConnection();
            await connection.InitializeAsync();
            
            // Act
            var answer = await connection.CreateAnswerAsync("test-offer");
            
            // Assert
            Assert.NotEmpty(answer);
            // Real SDP will be generated by WebRTC library
            
            // Cleanup
            connection.Dispose();
        }

        [Fact]
        public async Task WebRTCConnection_SendData_DoesNotThrow()
        {
            // Arrange
            var connection = new MockWebRTCConnection();
            await connection.InitializeAsync();
            var testData = System.Text.Encoding.UTF8.GetBytes("test mod data");
            
            // Act & Assert
            await connection.SendDataAsync(testData); // Should not throw
            
            // Cleanup
            connection.Dispose();
        }

        [Fact]
        public void WebRTCConnection_IsConnected_InitiallyFalse()
        {
            // Arrange
            var connection = new MockWebRTCConnection();
            
            // Act & Assert
            Assert.False(connection.IsConnected);
            
            // Cleanup
            connection.Dispose();
        }
    }
}