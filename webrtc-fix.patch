// Fix for WebRTC "Object not initialized" issue

// 1. Prevent duplicate peer creation
private readonly ConcurrentDictionary<string, bool> _peerCreationLock = new();

public async Task<string> CreateAnswerAsync(string offerUrl)
{
    var uuid = ExtractUuidFromUrl(offerUrl);
    
    // Prevent duplicate peer creation
    if (!_peerCreationLock.TryAdd(uuid, true))
    {
        throw new InvalidOperationException($"Peer {uuid} is already being created");
    }
    
    try
    {
        // Only create ONE peer per UUID
        if (_peers.ContainsKey(uuid))
        {
            throw new InvalidOperationException($"Peer {uuid} already exists");
        }
        
        // Create peer and wait for full initialization
        var peer = await CreatePeerConnection(uuid, isOfferer: false);
        await Task.Delay(100); // Ensure WebRTC is ready
        
        // Set remote offer BEFORE processing ICE candidates
        await peer.SetRemoteDescriptionAsync(offer);
        
        return await peer.CreateAnswerAsync();
    }
    finally
    {
        _peerCreationLock.TryRemove(uuid, out _);
    }
}

// 2. Queue ICE candidates until peer is ready
private readonly ConcurrentDictionary<string, Queue<string>> _pendingIceCandidates = new();

private void HandleIceCandidate(string uuid, string candidate)
{
    if (_peers.TryGetValue(uuid, out var peer) && peer.IsInitialized)
    {
        peer.AddIceCandidate(candidate);
    }
    else
    {
        // Queue for later processing
        _pendingIceCandidates.AddOrUpdate(uuid, 
            new Queue<string>(new[] { candidate }),
            (key, queue) => { queue.Enqueue(candidate); return queue; });
    }
}

// 3. Process queued ICE candidates after peer is ready
private async Task ProcessPendingIceCandidates(string uuid)
{
    if (_pendingIceCandidates.TryRemove(uuid, out var candidates))
    {
        var peer = _peers[uuid];
        while (candidates.Count > 0)
        {
            await peer.AddIceCandidateAsync(candidates.Dequeue());
        }
    }
}